quarkus.application.name=transaction-service
quarkus.http.port=8082
quarkus.mongodb.connection-string=mongodb://admin:admin@localhost:27017/?authSource=admin&retryWrites=false
quarkus.mongodb.database=db_transaction
quarkus.log.level=INFO
quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c{3.}] (%t) %s%e%n
quarkus.smallrye-openapi.path=/openapi
quarkus.swagger-ui.path=/swagger-ui
quarkus.http.redirect-to-dev-ui=true
quarkus.rest-client."account-service".url=http://localhost:8081
quarkus.rest-client."account-service".read-timeout=5000

# ====================================================================
# CONFIGURACIÓN GENERAL DE TIMEOUTS
# ====================================================================

# Timeout estándar para transacciones rápidas (e.g., 1 segundo)
transaction-service.timeout.ms=1000

# Timeout para orquestación compleja (e.g., transferencias que dependen de varios servicios)
transaction-service.orchestration-timeout.ms=1500

# Timeout para consultas analíticas o reportes pesados
transaction-service.report-timeout.ms=4000

# ====================================================================
# CONFIGURACIÓN DE CIRCUIT BREAKER (Común)
# ====================================================================
# Tamaño de la ventana de solicitudes (Circuit Breaker solo evalúa fallos si se han realizado 10 llamadas)
transaction-service.cb.request-volume=10
# Si el 60% de las solicitudes fallan, el circuito se abre
transaction-service.cb.failure-ratio=0.6
# Tiempo que el circuito permanece abierto (5 segundos)
transaction-service.cb.delay=5000
# Número de llamadas exitosas para cerrar el circuito desde HALF_OPEN
transaction-service.cb.success-threshold=3


# ====================================================================
# 1. processTransfer (Orquestación: 1500ms Timeout)
# ====================================================================
com.bancario.transaction.service.impl.TransactionServiceImpl/processTransfer/Timeout/value=${transaction-service.orchestration-timeout.ms}
com.bancario.transaction.service.impl.TransactionServiceImpl/processTransfer/CircuitBreaker/requestVolumeThreshold=${transaction-service.cb.request-volume}
com.bancario.transaction.service.impl.TransactionServiceImpl/processTransfer/CircuitBreaker/failureRatio=${transaction-service.cb.failure-ratio}
com.bancario.transaction.service.impl.TransactionServiceImpl/processTransfer/CircuitBreaker/delay=${transaction-service.cb.delay}
com.bancario.transaction.service.impl.TransactionServiceImpl/processTransfer/CircuitBreaker/successThreshold=${transaction-service.cb.success-threshold}


# ====================================================================
# 2. processDeposit (Transaccional: 1000ms Timeout)
# ====================================================================
com.bancario.transaction.service.impl.TransactionServiceImpl/processDeposit/Timeout/value=${transaction-service.timeout.ms}
com.bancario.transaction.service.impl.TransactionServiceImpl/processDeposit/CircuitBreaker/requestVolumeThreshold=${transaction-service.cb.request-volume}
com.bancario.transaction.service.impl.TransactionServiceImpl/processDeposit/CircuitBreaker/failureRatio=${transaction-service.cb.failure-ratio}
com.bancario.transaction.service.impl.TransactionServiceImpl/processDeposit/CircuitBreaker/delay=${transaction-service.cb.delay}
com.bancario.transaction.service.impl.TransactionServiceImpl/processDeposit/CircuitBreaker/successThreshold=${transaction-service.cb.success-threshold}


# ====================================================================
# 3. processWithdrawal (Transaccional: 1000ms Timeout) <-- ¡Añadido!
# ====================================================================
com.bancario.transaction.service.impl.TransactionServiceImpl/processWithdrawal/Timeout/value=${transaction-service.timeout.ms}
com.bancario.transaction.service.impl.TransactionServiceImpl/processWithdrawal/CircuitBreaker/requestVolumeThreshold=${transaction-service.cb.request-volume}
com.bancario.transaction.service.impl.TransactionServiceImpl/processWithdrawal/CircuitBreaker/failureRatio=${transaction-service.cb.failure-ratio}
com.bancario.transaction.service.impl.TransactionServiceImpl/processWithdrawal/CircuitBreaker/delay=${transaction-service.cb.delay}
com.bancario.transaction.service.impl.TransactionServiceImpl/processWithdrawal/CircuitBreaker/successThreshold=${transaction-service.cb.success-threshold}


# ====================================================================
# 4. getCommissionsReportData (Reporte Analítico: 4000ms Timeout)
# ====================================================================
com.bancario.transaction.service.impl.TransactionServiceImpl/getCommissionsReportData/Timeout/value=${transaction-service.report-timeout.ms}
com.bancario.transaction.service.impl.TransactionServiceImpl/getCommissionsReportData/CircuitBreaker/requestVolumeThreshold=${transaction-service.cb.request-volume}
com.bancario.transaction.service.impl.TransactionServiceImpl/getCommissionsReportData/CircuitBreaker/failureRatio=${transaction-service.cb.failure-ratio}
com.bancario.transaction.service.impl.TransactionServiceImpl/getCommissionsReportData/CircuitBreaker/delay=${transaction-service.cb.delay}
com.bancario.transaction.service.impl.TransactionServiceImpl/getCommissionsReportData/CircuitBreaker/successThreshold=${transaction-service.cb.success-threshold}